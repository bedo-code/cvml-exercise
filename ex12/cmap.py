
import argparse
import cv2
import numpy as np
import open3d as o3d
import os
import pycolmap
from tqdm import tqdm
from pathlib import Path

def extract_frames(video_path, output_dir, frame_interval=10):
    """
    Extract frames from a video at a given interval.
    """
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    cap = cv2.VideoCapture(video_path)
    frame_count = 0
    saved_count = 0

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        if frame_count % frame_interval == 0:
            frame_path = os.path.join(output_dir, f"frame_{saved_count:04d}.jpg")
            cv2.imwrite(frame_path, frame)
            saved_count += 1

        frame_count += 1

    cap.release()
    print(f"Extracted {saved_count} frames to {output_dir}")

def run_colmap(image_dir, output_dir):
    """
    Run COLMAP to perform Structure-from-Motion (SfM) and Multi-View Stereo (MVS).
    """
    Path(output_dir).mkdir(parents=True, exist_ok=True)

    # Run feature extraction
    pycolmap.extract_features(image_dir, output_dir)

    # Run feature matching
    pycolmap.match_features(output_dir)

    # Run SfM reconstruction
    reconstruction = pycolmap.incremental_mapping(output_dir, output_dir)
    reconstruction.write(output_dir)

    # Run dense reconstruction (MVS)
    pycolmap.dense_reconstruction(output_dir, output_dir)

def load_point_cloud(colmap_output_dir):
    """
    Load the point cloud generated by COLMAP.
    """
    ply_path = os.path.join(colmap_output_dir, "dense", "fused.ply")
    if not os.path.exists(ply_path):
        raise FileNotFoundError(f"Point cloud file not found: {ply_path}")

    pcd = o3d.io.read_point_cloud(ply_path)
    return pcd

def refine_point_cloud(pcd):
    """
    Refine the point cloud using Open3D.
    """
    # Remove statistical outliers
    pcd, _ = pcd.remove_statistical_outlier(nb_neighbors=20, std_ratio=2.0)

    # Estimate normals
    pcd.estimate_normals(search_param=o3d.geometry.KDTreeSearchParamHybrid(radius=0.1, max_nn=30))

    # Voxel downsampling
    pcd = pcd.voxel_down_sample(voxel_size=0.01)

    return pcd

def generate_point_cloud(video_path, output_file, frame_interval=10):
    """
    Generate a point cloud from a video of a single object.
    """
    # Step 1: Extract frames from the video
    image_dir = os.path.join(output_file, "images")
    extract_frames(video_path, image_dir, frame_interval)

    # Step 2: Run COLMAP for SfM and MVS
    colmap_output_dir = os.path.join(output_file, "colmap_output")
    run_colmap(image_dir, colmap_output_dir)

    # Step 3: Load the point cloud
    pcd = load_point_cloud(colmap_output_dir)

    # Step 4: Refine the point cloud
    refined_pcd = refine_point_cloud(pcd)

    # Save the refined point cloud
    o3d.io.write_point_cloud(output_file, refined_pcd)
    print(f"Refined point cloud saved to {output_file}")

    return refined_pcd

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='3D reconstruction from images/video Using colmap')
    parser.add_argument('-i', required=True, help='Input video file or image directory')
    parser.add_argument('-o', required=True, help='Output PLY file')

    args = parser.parse_args()
    frame_interval = 10  # Extract every 10th frame

    # Generate the point cloud
    point_cloud = generate_point_cloud(args.i, args.o, frame_interval)

    # Visualize the point cloud
    o3d.visualization.draw_geometries([point_cloud])